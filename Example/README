Assumption: That the reads are error free. Reads are stored in the file paired-reads.fasta, the haplotypes used to generate them are stored in reference.fasta. We assume that reference.fasta is unknown and reconstruct them using paired-reads.fasta
Initial files
paired-reads.fasta : paired-reads file, containing paired reads as p1 p2 p1 p2 in a single file.
listofkmers.txt: containing a list of k-mer values for which k-mer counts is performed. (Optional file, not required if k-mer counts are performed separately)

# Preliminaries 
1. Create the k-mer counts files 

Command : 
dsk-1.5655/multi-dsk paired-reads.fasta listofkmers.txt -m 8192 -d 10000 

where paired-reads.fasta is the paired reads file,
listofkmers.txt is the k-mers file
-m specifies the memory limit and
-d specifies the disk space limit

The command outputs following files:
paired-reads.solid_kmers_binary.60
paired-reads.solid_kmers_binary.61 
which contain compressed version of k-mer counts. The tool MLEHaplo requires uncompressed k-mer counts in the format
"kmer count". Thus we use the command parse_results in the dsk-1.5655 folder for generating uncompressed
"kmer count" files

2. De compressing output of multi-dsk-1
Command:
dsk-1.5655/parse_results paired-reads.solid_kmers_binary.60 > paired-reads.60

Remove the temporary solid_kmers_binary files , as they are not required for later analysis.

3. Generate De Bruijn Graph
From the fasta reads file 
-------------------------
Generating the graph needs two files and a parameter. 
1. fasta file containing all the reads : paired-reads.fasta
2. k-mer counts file generated above : paired-reads.60
3. a threshold value for ignoring erroneous k-mers : 0 for the current analysis as reads are assumed error free

Command:
perl construct_graph.pl  paired-reads.fasta paired-reads.60 0 paired-reads.60.graph "s"

Here 0 is the k-mer counts threshold, 
paired-reads.60.graph is the graph output file 
"s" parameter tells the perl script that there is a single fasta file of reads. 

From (k+1)-mer counts file 
--------------------------
A graph can also be generated from (k+1) mer counts file, while using k-mer counts as reference
The input files required now are :
1. (k+1)-mer counts file : paired-reads.61
2. k-mer counts file : paired-reads.60
3. A threshold as before : 0

Command : 
perl construct_graph_kmer.pl -k1 paired-reads.61 -k paired-reads.60 -t 0
 -w paired-reads.60.k1.graph                   

Here the output file is paired-reads.60.k1.graph , which has exactly the same number of edges as the graph generated from the fasta file. 

Step 4: Create the paired set file

Command :
perl ../construct_paired_without_bloom.pl -fasta paired-reads.fasta -kmerfi
le paired-reads.60 -thresh 0 -wr paired-reads.60.pk.txt    

Output Paired-Set is stored in paired-reads.60.pk.txt

----------------------------------------------------------------------------
Running ViPRA
-----------------

Running ViPRA takes as input 
1. graph file : paired-reads.60.graph
2. kmer counts file : paired-reads.60
3. paired-set file : paired-reads.60.pk.txt
4. Threshold value : 0

Command : 
perl dg_cover.pl -graph paired-reads.60.graph -kmer paired-reads.60 -paired paired-reads.60.pk.txt -fact 15 -thresh 0 -IS 400 > paired-reads.60.fact15.txt

The script outputs following temporary files which are useful for the MLEHaplo part of the tool.

Main output file : paired-reads.60.fact15.txt 
This file contains the score of every path produced by ViPRA and the sequences of all paths 
Temporary output files:
1. paired-reads.60.comp.txt : Contains a sets of paired vertices in the condensed graph that are compatible with each other based on the paired set
2. paired-reads.60.bubble.txt: Contains a sets of paired bubbles in the condensed graph that are compatible with each other based on the paired set
3. paired-reads.60.cond.graph : Contains the condensed version of De Bruijn graph, with non-branching paths condensed to a single vertex
4. paired-reads.60.depth : Contains the depth first search traversal of the graph 
5. paired-reads.60.nodedepth : Temporary file for debugging of code

Step ViPRA a 
-------------
Generation of Fasta file of paths: 
perl process_dg.pl paired-reads.60.fact15.txt > paired-reads.60.fact15.fasta


Step ViPRA b
-------------
Generation of paths file for maximum likelihood estimation 
----------------------------------------------------------
perl get_paths_dgcover.pl -f paired-reads.60.fact15.txt -w paired-reads.60.fact15.paths.txt

Output file contains the condensed representation of paths generated by ViPRA

Running MLEHaplo evaluation
----------------------------
Required input files & Parameters
1. Condensed Graph file : paired-reads.60.cond.graph
2. Compatible Set : paired-reads.60.comp.txt
3. Paths file from ViPRA: paired-reads.60.fact15.paths.txt 
4. Genome Length: Approximate genome Length


Command: 
perl likelihood_singles_wrapper.pl -condgraph paired-reads.60.cond.graph -compset paired-reads.60.comp.txt -pathsfile paired-reads.60.fact15.paths.txt -back -gl 1200 -slow  > paired-reads.60.smxlik.txt


Output file : paired-reads.60.smxlik.txt contains the log-likelihood of a set of paths of given size
the format of the file is 
"Size of set of paths" "Log-likelihood" "Upper log-likelihood bound" "Lower log-likelihood bound" "ID of path removed in this step"

To get the final set of paths/sequences in the MLE set use: 

Command: 
perl extract_MLE.pl -f paired-reads.60.fact15.fasta -l paired-reads.60.smxlik.txt > paired-reads.60.MLE.fasta

